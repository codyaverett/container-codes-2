name: CI

on:
  push:
    branches: [main, master]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  system-requirements:
    name: Check System Requirements
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check system requirements
        run: make requirements-check

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: system-requirements
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        if: hashFiles('requirements-dev.txt') != '' || hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Set up Node
        if: hashFiles('package-lock.json') != '' || hashFiles('pnpm-lock.yaml') != '' || hashFiles('yarn.lock') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Node deps
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Set up Go
        if: hashFiles('go.mod') != ''
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Lint
        run: make lint
        continue-on-error: true

      - name: Format check
        run: make format-check

      - name: Test
        run: make test

  container-operations:
    name: Container Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for container files
        id: check-containers
        run: |
          if [ -f compose.yml ] || [ -f Dockerfile ] || ls containers/*/Dockerfile 2>/dev/null; then
            echo "has-containers=true" >> $GITHUB_OUTPUT
          else
            echo "has-containers=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check-containers.outputs.has-containers == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build containers
        if: steps.check-containers.outputs.has-containers == 'true'
        run: make build

      - name: Test container startup
        if: steps.check-containers.outputs.has-containers == 'true'
        run: |
          make up
          sleep 5
          make down

  repository-status:
    name: Repository Status Report
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-and-test, container-operations]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Generate status report
        run: |
          echo "## Repository Status Report" >> $GITHUB_STEP_SUMMARY
          echo "### Content Statistics" >> $GITHUB_STEP_SUMMARY
          make content-stats >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Repository Info" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Run: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
