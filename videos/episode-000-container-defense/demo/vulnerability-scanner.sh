#!/bin/bash
set -euo pipefail

# Dependency Vulnerability Scanning Demo for Episode 0
# Demonstrates comprehensive security scanning of container images and dependencies

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${PURPLE}üîç Container Vulnerability Scanner Demo${NC}"
echo "==========================================="

# Create demo directory
DEMO_DIR="$HOME/vulnerability-scanner-demo"
mkdir -p "$DEMO_DIR"/{projects,results,images}
cd "$DEMO_DIR"

echo -e "${BLUE}üìÅ Working in: $DEMO_DIR${NC}"

# Function to create test projects with vulnerable dependencies
create_vulnerable_projects() {
    echo -e "${YELLOW}‚ö†Ô∏è  Creating test projects with vulnerable dependencies...${NC}"
    
    # Python project with known vulnerabilities
    mkdir -p projects/python-webapp
    cat << 'EOF' > projects/python-webapp/requirements.txt
# Intentionally vulnerable dependencies for demonstration
Flask==2.2.0           # Has security issues
Jinja2==3.0.0          # Has security issues  
urllib3==1.26.5        # Has security issues
Pillow==8.3.0          # Has security issues
PyYAML==5.4.0          # Has security issues
requests==2.25.0       # Has security issues
cryptography==3.4.8    # Has security issues

# Some legitimate packages
click==8.1.3
itsdangerous==2.1.2
MarkupSafe==2.1.1
Werkzeug==2.2.2
EOF

    cat << 'EOF' > projects/python-webapp/app.py
#!/usr/bin/env python3
"""
Simple Flask app for vulnerability testing
"""
from flask import Flask, request, render_template_string

app = Flask(__name__)

@app.route('/')
def hello():
    name = request.args.get('name', 'World')
    # This is vulnerable to template injection - for demo purposes
    template = f"<h1>Hello {name}!</h1>"
    return render_template_string(template)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
EOF

    cat << 'EOF' > projects/python-webapp/Dockerfile
FROM python:3.9-alpine

WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY app.py .
EXPOSE 5000

CMD ["python", "app.py"]
EOF

    # Node.js project with vulnerable dependencies
    mkdir -p projects/node-api
    cat << 'EOF' > projects/node-api/package.json
{
  "name": "vulnerable-node-api",
  "version": "1.0.0",
  "description": "Demo Node.js API with vulnerable dependencies",
  "main": "server.js",
  "dependencies": {
    "express": "4.17.1",
    "lodash": "4.17.19",
    "axios": "0.21.0",
    "jsonwebtoken": "8.5.1",
    "bcrypt": "5.0.0",
    "mongoose": "5.12.0",
    "cors": "2.8.5",
    "helmet": "4.4.1"
  },
  "scripts": {
    "start": "node server.js"
  }
}
EOF

    cat << 'EOF' > projects/node-api/server.js
const express = require('express');
const cors = require('cors');
const _ = require('lodash');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// Vulnerable endpoint using lodash
app.post('/api/merge', (req, res) => {
    const result = {};
    // This is vulnerable to prototype pollution
    _.merge(result, req.body);
    res.json(result);
});

app.get('/api/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
EOF

    cat << 'EOF' > projects/node-api/Dockerfile
FROM node:14-alpine

WORKDIR /app
COPY package*.json ./
RUN npm install

COPY server.js .
EXPOSE 3000

CMD ["npm", "start"]
EOF

    # Go project with vulnerable dependencies
    mkdir -p projects/go-service
    cat << 'EOF' > projects/go-service/go.mod
module vulnerable-go-service

go 1.19

require (
    github.com/gorilla/mux v1.8.0
    github.com/gorilla/handlers v1.5.1
    github.com/dgrijalva/jwt-go v3.2.0+incompatible  // Has security issues
    golang.org/x/crypto v0.0.0-20201016220609-9e8e0b390897  // Old version with issues
    gopkg.in/yaml.v2 v2.4.0  // Has security issues
)
EOF

    cat << 'EOF' > projects/go-service/main.go
package main

import (
    "encoding/json"
    "log"
    "net/http"
    "time"

    "github.com/gorilla/mux"
    "github.com/gorilla/handlers"
    "github.com/dgrijalva/jwt-go"
)

type Response struct {
    Message   string    `json:"message"`
    Timestamp time.Time `json:"timestamp"`
}

func healthHandler(w http.ResponseWriter, r *http.Request) {
    response := Response{
        Message:   "Service is healthy",
        Timestamp: time.Now(),
    }
    
    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(response)
}

func tokenHandler(w http.ResponseWriter, r *http.Request) {
    // Vulnerable JWT implementation for demo
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
        "user": "demo",
        "exp":  time.Now().Add(time.Hour * 24).Unix(),
    })
    
    tokenString, _ := token.SignedString([]byte("weak-secret"))
    
    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(map[string]string{"token": tokenString})
}

func main() {
    router := mux.NewRouter()
    
    router.HandleFunc("/health", healthHandler).Methods("GET")
    router.HandleFunc("/token", tokenHandler).Methods("POST")
    
    // CORS middleware
    corsHandler := handlers.CORS(
        handlers.AllowedOrigins([]string{"*"}),
        handlers.AllowedMethods([]string{"GET", "POST", "PUT", "DELETE"}),
        handlers.AllowedHeaders([]string{"*"}),
    )(router)
    
    log.Println("Server starting on :8080")
    log.Fatal(http.ListenAndServe(":8080", corsHandler))
}
EOF

    cat << 'EOF' > projects/go-service/Dockerfile
FROM golang:1.19-alpine AS builder

WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download

COPY main.go .
RUN go build -o service main.go

FROM alpine:3.15
RUN apk --no-cache add ca-certificates
WORKDIR /root/

COPY --from=builder /app/service .

EXPOSE 8080
CMD ["./service"]
EOF

    echo -e "${GREEN}‚úÖ Created vulnerable test projects${NC}"
}

# Function to demonstrate container image scanning
scan_container_images() {
    echo -e "\n${BLUE}üê≥ Building and Scanning Container Images${NC}"
    
    # Build the vulnerable images
    echo -e "${YELLOW}Building test images...${NC}"
    
    cd projects/python-webapp
    echo "Building Python webapp image..."
    podman build -t vulnerable-python-webapp:latest . --quiet
    cd ../..
    
    cd projects/node-api
    echo "Building Node.js API image..."
    podman build -t vulnerable-node-api:latest . --quiet
    cd ../..
    
    cd projects/go-service
    echo "Building Go service image..."
    podman build -t vulnerable-go-service:latest . --quiet
    cd ../..
    
    echo -e "${GREEN}‚úÖ Images built successfully${NC}"
    
    # Scan with Trivy (comprehensive scanner)
    echo -e "\n${YELLOW}Scanning with Trivy...${NC}"
    
    # Function to run Trivy scan
    run_trivy_scan() {
        local image=$1
        local output_file=$2
        
        echo "üîç Scanning $image..."
        podman run --rm \
            -v /var/lib/containers:/var/lib/containers:ro \
            -v "$(pwd)/results:/results" \
            aquasec/trivy:latest image \
            --format json \
            --output "/results/$output_file" \
            "$image"
        
        # Also generate human-readable report
        podman run --rm \
            -v /var/lib/containers:/var/lib/containers:ro \
            aquasec/trivy:latest image \
            --format table \
            "$image" | head -50
    }
    
    # Scan each image
    run_trivy_scan "vulnerable-python-webapp:latest" "python-webapp-scan.json"
    echo -e "${GREEN}‚úÖ Python webapp scan complete${NC}"
    
    run_trivy_scan "vulnerable-node-api:latest" "node-api-scan.json"
    echo -e "${GREEN}‚úÖ Node.js API scan complete${NC}"
    
    run_trivy_scan "vulnerable-go-service:latest" "go-service-scan.json"
    echo -e "${GREEN}‚úÖ Go service scan complete${NC}"
}

# Function to demonstrate dependency file scanning
scan_dependency_files() {
    echo -e "\n${BLUE}üìã Scanning Dependency Files${NC}"
    
    # Scan Python requirements.txt
    echo -e "${YELLOW}Scanning Python requirements.txt...${NC}"
    podman run --rm \
        -v "$(pwd)/projects:/projects:ro" \
        -v "$(pwd)/results:/results" \
        aquasec/trivy:latest fs \
        --format json \
        --output /results/python-deps-scan.json \
        /projects/python-webapp/requirements.txt
    
    # Display summary
    podman run --rm \
        -v "$(pwd)/projects:/projects:ro" \
        aquasec/trivy:latest fs \
        --format table \
        /projects/python-webapp/requirements.txt
    
    # Scan Node.js package.json
    echo -e "\n${YELLOW}Scanning Node.js package.json...${NC}"
    podman run --rm \
        -v "$(pwd)/projects:/projects:ro" \
        -v "$(pwd)/results:/results" \
        aquasec/trivy:latest fs \
        --format json \
        --output /results/node-deps-scan.json \
        /projects/node-api/package.json
    
    # Display summary
    podman run --rm \
        -v "$(pwd)/projects:/projects:ro" \
        aquasec/trivy:latest fs \
        --format table \
        /projects/node-api/package.json
    
    # Scan Go dependencies
    echo -e "\n${YELLOW}Scanning Go module dependencies...${NC}"
    podman run --rm \
        -v "$(pwd)/projects:/projects:ro" \
        -v "$(pwd)/results:/results" \
        aquasec/trivy:latest fs \
        --format json \
        --output /results/go-deps-scan.json \
        /projects/go-service/go.mod
    
    # Display summary
    podman run --rm \
        -v "$(pwd)/projects:/projects:ro" \
        aquasec/trivy:latest fs \
        --format table \
        /projects/go-service/go.mod
}

# Function to demonstrate alternative scanners
demonstrate_alternative_scanners() {
    echo -e "\n${BLUE}üîß Demonstrating Alternative Security Scanners${NC}"
    
    # Grype scanner
    echo -e "${YELLOW}Scanning with Grype...${NC}"
    podman run --rm \
        -v /var/lib/containers:/var/lib/containers:ro \
        -v "$(pwd)/results:/results" \
        anchore/grype:latest \
        vulnerable-python-webapp:latest \
        -o json \
        --file /results/grype-python-scan.json
    
    # Show summary
    podman run --rm \
        -v /var/lib/containers:/var/lib/containers:ro \
        anchore/grype:latest \
        vulnerable-python-webapp:latest | head -30
    
    echo -e "${GREEN}‚úÖ Grype scan complete${NC}"
    
    # Clair scanner (if available)
    echo -e "\n${YELLOW}Note: Clair requires more complex setup${NC}"
    echo "In production, you'd typically run Clair as a service."
    echo "For this demo, we'll use simpler scanners."
}

# Function to analyze scan results
analyze_scan_results() {
    echo -e "\n${BLUE}üìä Analyzing Scan Results${NC}"
    
    # Create a simple results analyzer
    cat << 'EOF' > analyze_results.py
#!/usr/bin/env python3
"""
Analyze vulnerability scan results
"""
import json
import os
import sys
from collections import defaultdict

def analyze_trivy_results(filepath):
    """Analyze Trivy JSON results"""
    try:
        with open(filepath, 'r') as f:
            data = json.load(f)
        
        if not data or 'Results' not in data:
            print(f"No results found in {filepath}")
            return
        
        total_vulns = 0
        severity_counts = defaultdict(int)
        
        for result in data.get('Results', []):
            vulnerabilities = result.get('Vulnerabilities', [])
            total_vulns += len(vulnerabilities)
            
            for vuln in vulnerabilities:
                severity = vuln.get('Severity', 'UNKNOWN')
                severity_counts[severity] += 1
        
        print(f"\nüìã Results for {os.path.basename(filepath)}:")
        print(f"   Total vulnerabilities: {total_vulns}")
        if severity_counts:
            print("   Severity breakdown:")
            for severity in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'UNKNOWN']:
                if severity in severity_counts:
                    print(f"     {severity}: {severity_counts[severity]}")
        
        # Show top 5 vulnerabilities by severity
        all_vulns = []
        for result in data.get('Results', []):
            for vuln in result.get('Vulnerabilities', []):
                all_vulns.append(vuln)
        
        # Sort by severity priority
        severity_priority = {'CRITICAL': 0, 'HIGH': 1, 'MEDIUM': 2, 'LOW': 3, 'UNKNOWN': 4}
        all_vulns.sort(key=lambda x: severity_priority.get(x.get('Severity', 'UNKNOWN'), 4))
        
        if all_vulns:
            print("\n   üî• Top 5 vulnerabilities:")
            for i, vuln in enumerate(all_vulns[:5], 1):
                cve_id = vuln.get('VulnerabilityID', 'N/A')
                severity = vuln.get('Severity', 'UNKNOWN')
                package = vuln.get('PkgName', 'Unknown package')
                version = vuln.get('InstalledVersion', 'Unknown version')
                title = vuln.get('Title', 'No title')[:60] + '...' if len(vuln.get('Title', '')) > 60 else vuln.get('Title', 'No title')
                
                print(f"     {i}. {cve_id} ({severity}) - {package}@{version}")
                print(f"        {title}")
                
    except Exception as e:
        print(f"Error analyzing {filepath}: {e}")

def main():
    results_dir = "/results"
    
    print("üîç Vulnerability Scan Analysis")
    print("=" * 40)
    
    # Find all JSON result files
    json_files = []
    for filename in os.listdir(results_dir):
        if filename.endswith('.json'):
            json_files.append(os.path.join(results_dir, filename))
    
    if not json_files:
        print("No JSON result files found in /results")
        return
    
    for json_file in sorted(json_files):
        analyze_trivy_results(json_file)
    
    # Summary
    print("\n" + "=" * 40)
    print("üìä SECURITY ASSESSMENT SUMMARY")
    print("=" * 40)
    print("‚ö†Ô∏è  All test projects contain INTENTIONAL vulnerabilities")
    print("üîí In production:")
    print("   1. Regularly scan all dependencies")
    print("   2. Update vulnerable packages immediately")
    print("   3. Use dependency management tools")
    print("   4. Implement automated scanning in CI/CD")
    print("   5. Monitor for new vulnerabilities continuously")

if __name__ == "__main__":
    main()
EOF

    # Run the analysis in a container
    podman run -it --rm \
        --name results-analyzer \
        --security-opt no-new-privileges \
        --cap-drop ALL \
        --read-only \
        --tmpfs /tmp:rw,size=50m \
        --network none \
        -v "$(pwd)/results:/results:ro" \
        -v "$(pwd)/analyze_results.py:/app/analyze.py:ro" \
        python:3.11-alpine python /app/analyze.py
}

# Function to demonstrate secure scanning workflow
demonstrate_secure_workflow() {
    echo -e "\n${BLUE}üîÑ Secure Development Workflow${NC}"
    
    # Create a script that demonstrates a secure CI/CD scanning pipeline
    cat << 'EOF' > secure_pipeline.sh
#!/bin/bash
# Secure Container Pipeline Demo

set -euo pipefail

echo "üîí Secure Container Development Pipeline"
echo "========================================"

PROJECT_NAME="$1"
PROJECT_DIR="/projects/$PROJECT_NAME"

if [ ! -d "$PROJECT_DIR" ]; then
    echo "‚ùå Project not found: $PROJECT_NAME"
    exit 1
fi

cd "$PROJECT_DIR"

echo "üì¶ Step 1: Building container image..."
IMAGE_NAME="secure-$PROJECT_NAME:$(date +%s)"
podman build -t "$IMAGE_NAME" . --quiet

echo "üîç Step 2: Vulnerability scanning..."
SCAN_RESULT="/tmp/scan-result.json"
podman run --rm \
    -v /var/lib/containers:/var/lib/containers:ro \
    aquasec/trivy:latest image \
    --format json \
    --output "$SCAN_RESULT" \
    "$IMAGE_NAME"

# Check if there are critical vulnerabilities
CRITICAL_COUNT=$(python3 -c "
import json
with open('$SCAN_RESULT', 'r') as f:
    data = json.load(f)
count = 0
for result in data.get('Results', []):
    for vuln in result.get('Vulnerabilities', []):
        if vuln.get('Severity') == 'CRITICAL':
            count += 1
print(count)
")

echo "üö® Found $CRITICAL_COUNT critical vulnerabilities"

if [ "$CRITICAL_COUNT" -gt 0 ]; then
    echo "‚ùå SECURITY GATE: Critical vulnerabilities found!"
    echo "   Image will NOT be deployed to production"
    echo "   Please fix vulnerabilities and rebuild"
    exit 1
else
    echo "‚úÖ SECURITY GATE: No critical vulnerabilities"
    echo "   Image approved for deployment"
fi

echo "üßπ Step 3: Cleanup..."
podman rmi "$IMAGE_NAME" --force

echo "‚úÖ Pipeline complete"
EOF

    # Run the secure pipeline for each project
    echo "Running secure pipeline simulation..."
    
    for project in python-webapp node-api go-service; do
        echo -e "\n${YELLOW}Testing pipeline for: $project${NC}"
        
        podman run -it --rm \
            --name secure-pipeline \
            --security-opt no-new-privileges \
            --cap-drop ALL \
            --memory 2g \
            --tmpfs /tmp:rw,size=500m \
            -v /var/lib/containers:/var/lib/containers:ro \
            -v "$(pwd)/projects:/projects:ro" \
            -v "$(pwd)/secure_pipeline.sh:/app/pipeline.sh:ro" \
            python:3.11-alpine sh -c "
                apk add --no-cache bash
                bash /app/pipeline.sh $project
            " || echo "Pipeline failed for $project (expected due to vulnerabilities)"
    done
}

# Main execution
main() {
    echo -e "${PURPLE}üöÄ Starting Vulnerability Scanner Demo${NC}"
    
    # Create vulnerable projects
    create_vulnerable_projects
    
    # Build and scan container images
    scan_container_images
    
    # Scan dependency files directly
    scan_dependency_files
    
    # Demonstrate alternative scanners
    demonstrate_alternative_scanners
    
    # Analyze all results
    analyze_scan_results
    
    # Show secure workflow
    demonstrate_secure_workflow
    
    echo -e "\n${GREEN}üéâ Vulnerability Scanning Demo Complete!${NC}"
    echo -e "${BLUE}Key Takeaways:${NC}"
    echo "1. üîç Always scan container images before deployment"
    echo "2. üìã Scan dependency files during development"
    echo "3. üö® Block deployment of images with critical vulnerabilities"
    echo "4. üîÑ Implement automated scanning in CI/CD pipelines"
    echo "5. üìä Monitor and track vulnerability trends over time"
    echo "6. üõ†Ô∏è  Use multiple scanners for comprehensive coverage"
    
    echo -e "\n${YELLOW}Tools demonstrated:${NC}"
    echo "‚Ä¢ Trivy - Comprehensive vulnerability scanner"
    echo "‚Ä¢ Grype - Fast vulnerability scanner from Anchore"
    echo "‚Ä¢ Custom analysis tools"
    
    echo -e "\n${CYAN}Scan results saved to: $(pwd)/results/${NC}"
    ls -la results/
    
    # Cleanup option
    echo -e "\n${BLUE}üßπ Cleanup${NC}"
    read -p "Remove demo directory and images? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cd ..
        # Remove images
        podman rmi vulnerable-python-webapp:latest vulnerable-node-api:latest vulnerable-go-service:latest --force 2>/dev/null || true
        # Remove directory
        rm -rf "$DEMO_DIR"
        echo "‚úÖ Demo cleanup complete"
    else
        echo "Demo files kept in: $DEMO_DIR"
        echo "Remove images manually with: podman rmi vulnerable-python-webapp:latest vulnerable-node-api:latest vulnerable-go-service:latest --force"
    fi
}

# Check if required tools are available
check_requirements() {
    echo -e "${BLUE}üîç Checking requirements...${NC}"
    
    if ! command -v podman &> /dev/null; then
        echo -e "${RED}‚ùå Podman not found. Please install podman first.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Requirements check passed${NC}"
}

# Run the demo
check_requirements
main "$@"